# Will use this workflow to build docker image and deploy to production
name: Deploy to production

on:
  push:
  # Only trigger when there is a push on to main branch
    branches: [ "main" ]

# Can be assigned at the job or workflow level
permissions:
  # id-token: write - allows the JWT to be requested from GitHub's OIDC provider
  id-token: write
  # contents: read - required for actions/checkout
  contents: read 

jobs:

  deploy:
    name: Build image and deploy container with app
    # Github hosted runner
    runs-on: ubuntu-latest
       
    steps: 
    
    - name: Check out code 
      uses: actions/checkout@v2
    
    - name: Install kubectl
      # Installing kubectl allows us to deploy the image we build to a container and then configure it
      # Enables use of kubectl commands
      uses: azure/setup-kubectl@v1
      with: 
        version: 'v1.24.3'
      id: install
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::787608098916:role/GitHub_Actions_Role
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Load secrets from AWS and save to app.env
      # jq is available natively on Ubuntu and therefore doesn't require install
      run: aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > app.env

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        # Registry is pulled from the login-ecr step above
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # ECR repository name that we defined 
        REPOSITORY: simplebank
        # Using the GitHub SHA of the commit to tag the docker image
        IMAGE_TAG: ${{ github.sha }}
      # Build the docker image locally and then push to AWS
      # the -t $REGISTRY/$REPOSITORY:latest sets the image tag to latest when docker build is run
      # the -a pushes all tags to AWS ECR
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest . 
        docker push -a $REGISTRY/$REPOSITORY
      
    # Need to update kube config in order to point kubectl from localhost to our AWS EKS Cluster
    - name: Update kube config
      run: aws eks update-kubeconfig --name simple-bank --region us-east-2
    
    - name: Deploy image to AWS EKS Cluster (container)
      run: | 
        kubectl apply -f eks/deployment.yaml
        kubectl apply -f eks/service.yaml
        kubectl apply -f eks/ingress.yaml
