package db

import (
	"context"
	"database/sql"
	"fmt"
)

// Store provides all functions to execute db queries individually and as transactions
type Store interface {
	// defining a list of methods that this Store interface can implement
	// it will implement all *Queries methods plus the TransferTX method defined below
	Querier // interface in querier.go which contains all *Queries methods
	TransferTX(ctx context.Context, arg TransferTxParams) (TransferTxResult, error)
}

// SQLStore provides all functions to execute SQL queries individually and as transactions
type SQLStore struct {
	// including Queries struct to extend functionality is an example of a composition (preferred in Golang over inheritance)
	*Queries         // sqlc provided the Queries struct but it only allows for one operation on one specific table - all functions provided by Queries will be available to Store
	db       *sql.DB //required to create new db transactions
}

func NewStore(db *sql.DB) Store {
	// returns a Store interface (SQLStore implements Store interface as it implements all of its methods)
	// this Store interface actually connects to the real SQL DB as SQLStore actually connects to the database
	return &SQLStore{
		db:      db,      // input db
		Queries: New(db), // New function generated by sqlc - creates and returns a Queries object
	}
}

// execTx - executes a generic transaction - takes in a context and a callback function - starts a new db tx, creates a queries object with that tx, calls the callback function with the created queries, and commits or rolls back the changes
func (store *SQLStore) execTx(ctx context.Context, fn func(*Queries) error) error { // unexported function as it starts with a lowercase letter - will create exported functions for each transaction
	// start transaction - BeginTx returns a transaction object or an error
	tx, err := store.db.BeginTx(ctx, nil) // nil - use the default isolation level

	// means something went wrong
	if err != nil {
		return err
	}

	q := New(tx) // returns a new Queries object - same New() as in the NewStore function - New() takes both a db and a tx
	// q now has the queries that run within the transaction tx - call the callback func with the queries to see if there is an error
	err = fn(q)
	// need to rollback if there is an error
	if err != nil {
		// execute the rollback and test if it errored as well
		if rollBkErr := tx.Rollback(); rollBkErr != nil {
			return fmt.Errorf("TX error: %v, Rollback error: %v", err, rollBkErr) // returns a string as a value that satisfies error
		}
		// if rollBkErr is nil, the transaction error still isn't and we need to return it
		return err
	}

	// if all operations in the transaction are successful
	return tx.Commit() // tx.Commit returns an error - nil or otherwise
}

// TransferTxParams contains the input parameters for the transfer transaction
type TransferTxParams struct {
	FromAccountID int64 `json:"from_account_id"` // notice these are not single quotes, they are accents which are below the tilde
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

// TransferTxResult contains the result of the transfer transaction
type TransferTxResult struct {
	Transfer    Transfer `json:"transfer"`     // stores the transfer record
	FromAccount Account  `json:"from_account"` // from account record after the balance has been updated
	ToAccount   Account  `json:"to_account"`   // to account record after the balance has been updated
	FromEntry   Entry    `json:"from_entry"`   // entry record showing money is leaving the from account
	ToEntry     Entry    `json:"to_entry"`     // entry record showing money is coming in the to account
}

// struct used to pass the transaction name in store_test.go as context to the TransferTX() function
var txKey = struct{}{} // we are declaring a variable of type empty struct and the second {} indicate that we are creating a new empty object of type empty struct

// TransferTX - performs a money transfer from one account to another
// - it creates a transfer record, adds new entries, and updates each account's balance all within a single db tx
func (store *SQLStore) TransferTX(ctx context.Context, arg TransferTxParams) (TransferTxResult, error) {
	var result TransferTxResult // empty result at this point

	// creates and runs a new db transaction
	err := store.execTx(ctx, func(q *Queries) error {
		// we can use the Queries CRUD functions

		var err error // declared for CreateTransfer command

		// grab the transaction name from the context ctx
		txName := ctx.Value(txKey)

		// this Queries object is created from one database transaction - the methods we call will run within that one transaction
		// result (TransferTxResult object) has its Transfer proptery set to the CreateTransfer record which q (a *Queries object) calls
		// the CreateTransferParams struct is initialized using arg (TransferTxParams object)
		// since both result and arg are being accessed from within the compact function func(q *Queries) error, this compact function becomes a closure
		fmt.Println(txName, "Create Transfer")
		result.Transfer, err = q.CreateTransfer(ctx, CreateTransferParams{
			FromAccountID: arg.FromAccountID,
			ToAccountID:   arg.ToAccountID,
			Amount:        arg.Amount,
		})
		// if something failed
		if err != nil {
			return err
		}

		// since the transfer record is complete, we need to create the two entry records
		// one for the from account and the other for the to account
		// from account entry record
		fmt.Println(txName, "Create Entry - From Account")
		result.FromEntry, err = q.CreateEntry(ctx, CreateEntryParams{
			AccountID: arg.FromAccountID,
			Amount:    -arg.Amount, // the minus is added because money is being transfered from the account
		})

		if err != nil {
			return err
		}

		// to account entry record
		fmt.Println(txName, "Create Entry - To Account")
		result.ToEntry, err = q.CreateEntry(ctx, CreateEntryParams{
			AccountID: arg.ToAccountID,
			Amount:    arg.Amount, // postive value since the money is being transfered in to the account
		})

		if err != nil {
			return err
		}

		/* this is one way of updating the account balance but it requires two queries per account - new method below
		// get account, update account's balance, update database - requires locking
		// get original from account record
		// to avoid deadlock - GetAccountForUpdate had to be updated to say FOR NO KEY UPDATE
		// this ensures that the get account can run without impacting any foreign key dependencies since the primary key (id)
		// won't be changed by the get account query
		fmt.Println(txName, "Get Account For Update - From Account")
		account1, err := q.GetAccountForUpdate(ctx, arg.FromAccountID)
		if err != nil {
			return err
		}

		// update account record at FromAccountID with new balance
		fmt.Println(txName, "Update Account - From Account")
		result.FromAccount, err = q.UpdateAccount(ctx, UpdateAccountParams{
			ID:      arg.FromAccountID,
			Balance: account1.Balance - arg.Amount,
		})
		if err != nil {
			return err
		}

		// get original to account record
		fmt.Println(txName, "Get Account For Update - To Account")
		account2, err := q.GetAccountForUpdate(ctx, arg.ToAccountID)
		if err != nil {
			return err
		}

		fmt.Println(txName, "Update Account - To Account")
		result.ToAccount, err = q.UpdateAccount(ctx, UpdateAccountParams{
			ID:      arg.ToAccountID,
			Balance: account2.Balance + arg.Amount,
		})
		if err != nil {
			return err
		}*/

		/* this is one way of using AddAccountBalance - new method is below
		// using the new AddAccountBalance, we only need one query per account
		// given the scenario where money is transferring from account1 to account2 and from account2 to account1 during
		// concurrent transactions, to avoid deadlock, we need to ensure that the transfers occur in a specific order
		// in this case, we want account1 to update before account2 regardless of it being the from account or the to account
		if arg.FromAccountID < arg.ToAccountID {
			result.FromAccount, err = q.AddAccountBalance(ctx, AddAccountBalanceParams{
				ID:     arg.FromAccountID,
				Amount: -arg.Amount,
			})
			if err != nil {
				return err
			}

			result.ToAccount, err = q.AddAccountBalance(ctx, AddAccountBalanceParams{
				ID:     arg.ToAccountID,
				Amount: arg.Amount,
			})
			if err != nil {
				return err
			}
		} else {
			result.ToAccount, err = q.AddAccountBalance(ctx, AddAccountBalanceParams{
				ID:     arg.ToAccountID,
				Amount: arg.Amount,
			})
			if err != nil {
				return err
			}

			result.FromAccount, err = q.AddAccountBalance(ctx, AddAccountBalanceParams{
				ID:     arg.FromAccountID,
				Amount: -arg.Amount,
			})
			if err != nil {
				return err
			}
		}*/

		if arg.FromAccountID < arg.ToAccountID {
			// since we want to update the from account first (since its ID is less than the to account's ID)
			// we pass in the FromAccountID as account1 and make its amount negative since the money is leaving account1
			result.FromAccount, result.ToAccount, err = addMoney(ctx, q, arg.FromAccountID, -arg.Amount, arg.ToAccountID, arg.Amount)
		} else {
			// here, we want to update the to account first
			result.ToAccount, result.FromAccount, err = addMoney(ctx, q, arg.ToAccountID, arg.Amount, arg.FromAccountID, -arg.Amount)
		}

		return nil
	})

	return result, err // TransferTxResult and error
}

// addMoney - will be used to add money to two accounts - this is to refactor the code a bit as we have duplicate code in the if
// else statement
func addMoney(
	ctx context.Context,
	q *Queries,
	accountID1 int64,
	amount1 int64,
	accountID2 int64,
	amount2 int64,
) (account1 Account, account2 Account, err error) {
	// call AddAccountBalance to add amount1 to account1
	account1, err = q.AddAccountBalance(ctx, AddAccountBalanceParams{
		Amount: amount1,
		ID:     accountID1,
	})
	if err != nil {
		// since we are using named returns we needn't specify the return variables
		return // this is the same as return account1, account2, err
	}

	account2, err = q.AddAccountBalance(ctx, AddAccountBalanceParams{
		ID:     accountID2,
		Amount: amount2,
	})

	return //if err != nil, it will be returned here anyway and doesn't need to be handled specifically
}
